version: '3.8'

services:
  # TimescaleDB service
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    env_file:
      - .env.docker
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI service
  fastapi:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: python crypto_api_fast.py
    volumes:
      - ..:/app
    ports:
      - "${FASTAPI_PORT}:8000"
    env_file:
      - .env.docker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      timescaledb:
        condition: service_healthy

  # Flask service
  flask:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: python crypto_api_flask.py
    volumes:
      - ..:/app
    ports:
      - "${FLASK_PORT}:5000"
    env_file:
      - .env.docker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      timescaledb:
        condition: service_healthy

  # Dash Dashboard service
  dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: python crypto_dashboard.py
    volumes:
      - ..:/app
    ports:
      - "${DASH_PORT}:8050"
    env_file:
      - .env.docker
    depends_on:
      - fastapi
      - flask

  # Data Collection service
  data_collector:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      sh -c "
        python setup_database.py &&
        python data_collection.py &&
        python crypto_analysis.py
      "
    volumes:
      - ..:/app
      - ../data:/app/data
    env_file:
      - .env.docker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      timescaledb:
        condition: service_healthy

volumes:
  timescaledb_data:
  data: 